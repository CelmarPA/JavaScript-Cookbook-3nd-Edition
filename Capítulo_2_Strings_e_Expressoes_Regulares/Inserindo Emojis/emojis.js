"use strict";

/**
 *      Voc√™ quer adicionar um caractere Unicode extendido que tem 4 
 *      bites condificado, como um emoji ou certos tipos de palas n√£o 
 *      inglesas n√£o acentuadas.
 * 
 *      Caso queria simplesmente criar um string com um emoji, o truque 
 *      de copiar e colar functiona geralmente. Em um editor de c√≥digo 
 *      moderno voc√™ pode escrever c√≥digo como este:
*/
const hamburguer = "üçî";
const histHamburguer = "Eu gosto de hamburgueres" + hamburguer;

console.log(histHamburguer);

/**
 *      Outra op√ß√£o √© usar o valor Unicode para o emoji. O problema √© que 
 *      voc√™ n√£o pode usar uma sequ√™ncia de escape \u padr√£o para obter 
 *      um emoji, porque cada emoji √© armazenado como um valor de 4 bytes.
 * 
 *      A solu√ß√£o √© usar o m√©todo String.fromCodePoint():
*/
const hamburguerHist = "Eu gosto de hamburgueres" + String.fromCodePoint(0x1F354);

console.log(hamburguerHist);

// O emoji de hamburguer tem um c√≥digo Hexadecimal U+1F354. Para usar com fromCodePoint() substitua o prefixo  U+ por 0x.

/**
 *      Se voc√™ precisa fazer processamento de strings com strings que 
 *      podem incluir emojis, outros problemas podem surgir. Por exemplo, 
 *      o que voc√™ espera que esse c√≥digo encontre?
*/
const hamburguerLength = hamburguer.length;
console.log(hamburguerLength);

/**
 *      Mesmo que a sequ√™ncia de caracteres do hamb√∫rguer seja apenas um 
 *      caractere, para o seu c√≥digo o comprimento parece ser 2 porque o 
 *      emoji do hamb√∫rguer ocupa o dobro de bytes na mem√≥ria. Esta √© uma 
 *      abstra√ß√£o de vazamento e uma limita√ß√£o do suporte do JavaScript 
 *      para Unicode.
*/
